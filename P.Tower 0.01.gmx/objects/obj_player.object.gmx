<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_m_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_lifeform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init. variables
xaxis = 0;
yaxis = 0;
x_vel = 0;
y_vel = 0;
angle = 270;
turnrate = 8;


normalspd = 1;
spd = normalspd;
runspd = 3.5;

stamina_max = 100;
stamina = stamina_max;
hp_max = 150;
hp = hp_max;
mana_max = 80;
mana = mana_max;

dmg = 3;

state = scr_playerstate_move;

moveset = 0; //0 = idle, 1 = move, 2 = run, 3 = attack, 4 = spells
dir = 2;
attack_dir = 0;

combo = false;
dash_combo = false;


heal = false;

instance_create(xstart, ystart, obj_camera);
instance_create(0, 0, obj_control);

//Idle
animation[0, 0] = spr_mc_idle_right;
animation[0, 1] = spr_mc_idle_rightup;
animation[0, 2] = spr_mc_idle_up;
animation[0, 3] = spr_mc_idle_upleft;
animation[0, 4] = spr_mc_idle_left;
animation[0, 5] = spr_mc_idle_leftdown;
animation[0, 6] = spr_mc_idle_down;
animation[0, 7] = spr_mc_idle_downright;
//Move
animation[1, 0] = spr_mc_walk_right;
animation[1, 1] = spr_mc_walk_rightup;
animation[1, 2] = spr_mc_walk_up;
animation[1, 3] = spr_mc_walk_upleft;
animation[1, 4] = spr_mc_walk_left;
animation[1, 5] = spr_mc_walk_leftdown;
animation[1, 6] = spr_mc_walk_down;
animation[1, 7] = spr_mc_walk_downright;
//Run
animation[2, 0] = spr_player_r_right;
animation[2, 1] = spr_player_r_rightup;
animation[2, 2] = spr_player_r_up;
animation[2, 3] = spr_player_r_upleft;
animation[2, 4] = spr_player_r_left;
animation[2, 5] = spr_player_r_leftdown;
animation[2, 6] = spr_player_r_down;
animation[2, 7] = spr_player_r_downright;
//Attack
animation[3, 0] = spr_player_a_right;
animation[3, 1] = spr_player_a_rightup;
animation[3, 2] = spr_player_a_up;
animation[3, 3] = spr_player_a_upleft;
animation[3, 4] = spr_player_a_left;
animation[3, 5] = spr_player_a_leftdown;
animation[3, 6] = spr_player_a_down;
animation[3, 7] = spr_player_a_downright;
//Spells
animation[4, 0] = spr_player_s_right;
animation[4, 1] = spr_player_s_rightup;
animation[4, 2] = spr_player_s_up;
animation[4, 3] = spr_player_s_upleft;
animation[4, 4] = spr_player_s_left;
animation[4, 5] = spr_player_s_leftdown;
animation[4, 6] = spr_player_s_down;
animation[4, 7] = spr_player_s_downright;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initializing the particle emitter
ps = part_system_create();
emitter = part_emitter_create(ps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[6] Dash alarm (back to movestate)
state = scr_playerstate_move;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[5] Remove buff
dmg -= 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[4] Use magic
alarm[5] = 300;
dmg += 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[3] (empty: combo attack)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[2] (empty: ???)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[1] (emtpy: efter stamina = 0 går der x frames før man kan bruge det)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[0] (empty: bruges til stamina regen)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State, physics and gamepad_input
scr_get_gamepad_input(0);
script_execute(state);

scr_physics();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
depth = -y;
if (angle &gt; 0 &amp;&amp; angle &lt; 22.5) or (angle &lt; 360 &amp;&amp; angle &gt; 337.5) {
    dir = 0;
}
if (angle &gt; 22.5 &amp;&amp; angle &lt; 67.5) {
    dir = 1;
}
if (angle &gt; 67.5 &amp;&amp; angle &lt; 112.5) {
    dir = 2;
}
if (angle &gt; 112.5 &amp;&amp; angle &lt; 157.5) {
    dir = 3;
}
if (angle &gt; 157.5 &amp;&amp; angle &lt; 202.5) {
    dir = 4;
}
if (angle &gt; 202.5 &amp;&amp; angle &lt; 247.5) {
    dir = 5;
}
if (angle &gt; 247.5 &amp;&amp; angle &lt; 292.5) {
    dir = 6;
}
if (angle &gt; 292.5 &amp;&amp; angle &lt; 337.5) {
    dir = 7;
}

if (state == scr_playerstate_move) {
    sprite_index = animation[moveset, dir];
} else if (gamepad_button_check_pressed(0, gp_shoulderr)) {
    sprite_index = animation[moveset, attack_dir]; //HEY der er lige nu ét fram delay (pga. state transition) !!!
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle emitter!
part_emitter_region(ps, emitter, x-16, x+16, y-16, y+16, ps_shape_ellipse, ps_distr_linear);

//Create the particles inside the emitter
if (heal) {
    part_emitter_stream(ps, emitter, global.pt_heal, 1);
} else {
    part_emitter_clear(ps, emitter);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move to move_state after attack animation (or combo!)
if (sprite_index == animation[3, attack_dir]) {
    if (stamina &gt;= 10) &amp;&amp; (combo) {
        state = scr_playerstate_attacking;
        moveset = 3;
        image_index = 0;
        image_speed = 18/60;
        attack_dir = dir;
        alarm[0] = 72; //how long before stamina regen (look at run above)
        alarm[3] = 12;
        
        combo = false;
    } else if (stamina &gt;= 20) &amp;&amp; (dash_combo) {
        state = scr_playerstate_dash;
        alarm[0] = 72;
        alarm[6] = 10;
        stamina -= 20;
        dash_combo = false;
    } else {
        state = scr_playerstate_move;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle systemet getter destroyed
part_system_destroy(ps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw stats
var distance = 15;

draw_set_font(font_8courier);

if (hp &gt; 0) {
    draw_set_color(c_red);
    draw_rectangle(10, 10, 10+hp, 25, false);
}
if (stamina &gt; 0) {
    draw_set_color(c_lime);
    draw_rectangle(10, 10+distance*2, 10+stamina, 25+distance*2, false);
}
//outlines
draw_set_color(c_black);
draw_rectangle(9, 9+distance*2, 11+stamina_max, 26+distance*2, true);
draw_rectangle(9, 9, 11+hp_max, 26, true);


draw_text(10, 65, alarm[0]);
draw_text(50, 65, alarm[1]);
draw_text(90, 65, alarm[3]);
draw_text(10, 110, "DMG " + string(dmg));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw turnrate thing (and self)
//draw_sprite_ext(spr_temp_streg,0,x,y,1,1,angle,c_white,1)
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
